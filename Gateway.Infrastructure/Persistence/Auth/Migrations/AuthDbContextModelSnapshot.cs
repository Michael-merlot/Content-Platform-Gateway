// <auto-generated />
using Gateway.Infrastructure.Persistence.Auth;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gateway.Infrastructure.Persistence.Auth.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("auth")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gateway.Core.Models.Auth.Endpoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("controller");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("http_method");

                    b.HasKey("Id")
                        .HasName("pk_endpoints");

                    b.HasIndex("Controller", "Action", "HttpMethod")
                        .IsUnique()
                        .HasDatabaseName("ix_endpoints_controller_action_http_method");

                    b.ToTable("endpoints", "auth");
                });

            modelBuilder.Entity("Gateway.Core.Models.Auth.EndpointPermission", b =>
                {
                    b.Property<long>("EndpointId")
                        .HasColumnType("bigint")
                        .HasColumnName("endpoint_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.HasKey("EndpointId", "PermissionId")
                        .HasName("pk_endpoints_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_endpoints_permissions_permission_id");

                    b.ToTable("endpoints_permissions", "auth");
                });

            modelBuilder.Entity("Gateway.Core.Models.Auth.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_name");

                    b.ToTable("permissions", "auth");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Do nothing",
                            Name = "do.nothing"
                        });
                });

            modelBuilder.Entity("Gateway.Core.Models.Auth.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", "auth");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsAdmin = true,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Gateway.Core.Models.Auth.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.ToTable("role_permissions", "auth");
                });

            modelBuilder.Entity("Gateway.Core.Models.Auth.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", "auth");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Gateway.Core.Models.Auth.EndpointPermission", b =>
                {
                    b.HasOne("Gateway.Core.Models.Auth.Endpoint", "Endpoint")
                        .WithMany("EndpointPermissions")
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_endpoints_permissions_endpoints_endpoint_id");

                    b.HasOne("Gateway.Core.Models.Auth.Permission", "Permission")
                        .WithMany("EndpointPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_endpoints_permissions_permissions_permission_id");

                    b.Navigation("Endpoint");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Gateway.Core.Models.Auth.RolePermission", b =>
                {
                    b.HasOne("Gateway.Core.Models.Auth.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("Gateway.Core.Models.Auth.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Gateway.Core.Models.Auth.UserRole", b =>
                {
                    b.HasOne("Gateway.Core.Models.Auth.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Gateway.Core.Models.Auth.Endpoint", b =>
                {
                    b.Navigation("EndpointPermissions");
                });

            modelBuilder.Entity("Gateway.Core.Models.Auth.Permission", b =>
                {
                    b.Navigation("EndpointPermissions");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Gateway.Core.Models.Auth.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
